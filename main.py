import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
    ChatJoinRequestHandler,
    CommandHandler,
    ConversationHandler,
)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 10000))

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5 = range(5)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è
        context.user_data['user_id'] = user.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await context.bot.send_message(
            chat_id=user.id,
            text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n**1. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?**"
        )
        return QUESTION_1
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END

async def handle_answer_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
    context.user_data["question_1"] = update.message.text
    await update.message.reply_text("**2. –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É –≤–∞—Å –µ—Å—Ç—å?**")
    return QUESTION_2

async def handle_answer_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_2"] = update.message.text
    await update.message.reply_text("**3. –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å?**")
    return QUESTION_3

async def handle_answer_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_3"] = update.message.text
    await update.message.reply_text("**4. –ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?**")
    return QUESTION_4

async def handle_answer_4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_4"] = update.message.text
    await update.message.reply_text("**5. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É?**")
    return QUESTION_5

async def handle_answer_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_5"] = update.message.text
    user_id = context.user_data['user_id']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
    report = (
        f"üö® **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!**\n"
        f"üÜî ID: `{user_id}`\n"
        f"üìù –û—Ç–≤–µ—Ç—ã:\n"
        f"1. {context.user_data['question_1']}\n"
        f"2. {context.user_data['question_2']}\n"
        f"3. {context.user_data['question_3']}\n"
        f"4. {context.user_data['question_4']}\n"
        f"5. {context.user_data['question_5']}"
    )
    
    await context.bot.send_message(chat_id=ADMIN_ID, text=report)
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[ChatJoinRequestHandler(handle_join_request)],
        states={
            QUESTION_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer_1)],
            QUESTION_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer_2)],
            QUESTION_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer_3)],
            QUESTION_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer_4)],
            QUESTION_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer_5)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    app.add_handler(conv_handler)
    
    # –í–µ–±—Ö—É–∫
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        secret_token=os.environ.get('SECRET_TOKEN', 'DEFAULT')
    )
