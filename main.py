import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
    ChatJoinRequestHandler,
)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 10000))

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    try:
        await context.bot.send_message(
            chat_id=user.id,
            text="*–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –Ω–∞ —á–µ—Ç—ã—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è* üîç\n\n–ü–µ—Ä–≤—ã–π: –æ—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ\?",
            parse_mode="MarkdownV2"
        )
        context.user_data['state'] = 'awaiting_name'
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    state = user_data.get('state')

    if state == 'awaiting_name':
        user_data['name'] = update.message.text
        user_data['state'] = 'awaiting_age'
        await update.message.reply_text("–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞.")

    elif state == 'awaiting_age':
        if not update.message.text.isdigit():
            await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            return
        user_data['age'] = update.message.text
        user_data['state'] = 'awaiting_city'
        await update.message.reply_text("–î–ª—è —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ ¬´–ì–µ–π-–†—è–∑–∞–Ω—å¬ª, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∑–¥–µ—Å—å –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ\?\n\n–ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫—Ä–∞—Ç–∫–æ –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ \(–∫–∞–∫ —Ö–æ—á–µ—à—å\)\.")

    elif state == 'awaiting_city':
        user_data['city'] = update.message.text
        user_data['state'] = 'awaiting_reason'
        await update.message.reply_text("–ù–∞–∑–æ–≤–∏ —Ç—Ä–∏ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞—Ç—å üüß")

    elif state == 'awaiting_reason':
        user_data['reason'] = update.message.text
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\!
üü™ –û—Ç–∫—É–¥–∞: {user_data['name']}
üü™ –í–æ–∑—Ä–∞—Å—Ç –∏ –≥–æ—Ä–æ–¥: {user_data['age']}
üü™ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {user_data['city']}
üü™ –ü–ª—é—Å—ã: {user_data['reason']}
üÜî ID: {update.message.from_user.id}"""
        )
        await update.message.reply_text(
            "*‚úî –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\!*\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞, ¬´–ì–µ–π\-–†—è–∑–∞–Ω—å¬ª –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ç–≤–æ–∏—Ö —á–∞—Ç–æ–≤ Telegram\.\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–µ–±–µ –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à –∞–¥–º–∏–Ω\.",
            parse_mode="MarkdownV2"
        )
        user_data.clear()

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(ChatJoinRequestHandler(handle_join_request))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        secret_token=os.environ.get('SECRET_TOKEN', 'DEFAULT')
    )
