import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
    ChatJoinRequestHandler,
)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 10000))

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    try:
        await context.bot.send_message(
            chat_id=user.id,
            text="**–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –Ω–∞ —á–µ—Ç—ã—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è** üíü\n\n"
                 "1. –û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ?",
            parse_mode="MarkdownV2"
        )
        context.user_data['state'] = 'q1'
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    state = user_data.get('state')

    if state == 'q1':
        user_data['source'] = update.message.text
        await update.message.reply_text(
            "–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: 25, –†—è–∑–∞–Ω—å"
        )
        user_data['state'] = 'q2'

    elif state == 'q2':
        if "," not in update.message.text:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: 25, –†—è–∑–∞–Ω—å")
            return
        age_city = update.message.text.split(",", 1)
        user_data['age'] = age_city[0].strip()
        user_data['city'] = age_city[1].strip()
        await update.message.reply_text(
            "–î–ª—è —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ ¬´–ì–µ–π-–†—è–∑–∞–Ω—å¬ª, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∑–¥–µ—Å—å –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ?\n"
            "(–ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫—Ä–∞—Ç–∫–æ –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ)"
        )
        user_data['state'] = 'q3'

    elif state == 'q3':
        user_data['purpose'] = update.message.text
        await update.message.reply_text(
            "–ù–∞–∑–æ–≤–∏ —Ç—Ä–∏ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞—Ç—å ü§î\n"
            "(–ö–∞–∂–¥—É—é –ø—Ä–∏—á–∏–Ω—É –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
        )
        user_data['state'] = 'q4'

    elif state == 'q4':
        user_data['reasons'] = update.message.text
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"""üö® *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*
            
‚Ä¢ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {user_data['source']}
‚Ä¢ **–í–æ–∑—Ä–∞—Å—Ç/–≥–æ—Ä–æ–¥:** {user_data['age']}, {user_data['city']}
‚Ä¢ **–¶–µ–ª—å:** {user_data['purpose']}
‚Ä¢ **–ü—Ä–∏—á–∏–Ω—ã:**\n{user_data['reasons']}
‚Ä¢ **ID:** {update.message.from_user.id}""",
            parse_mode="MarkdownV2"
        )
        await update.message.reply_text(
            "‚òëÔ∏è **–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
            "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∞–¥–º–∏–Ω –Ω–∞–ø–∏—à–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ.",
            parse_mode="MarkdownV2"
        )
        user_data.clear()

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(ChatJoinRequestHandler(handle_join_request))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        secret_token=os.environ.get('SECRET_TOKEN', 'DEFAULT')
    )
