import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
    ChatJoinRequestHandler,
    CommandHandler,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 10000))

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
QUESTION_1, QUESTION_2, QUESTION_3, QUESTION_4, QUESTION_5 = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_text: str, next_state: int):
    await update.message.reply_text(question_text)
    return next_state

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    try:
        # –ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã
        await context.bot.send_message(
            chat_id=user.id,
            text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:"
        )
        await context.bot.send_message(
            chat_id=user.id,
            text="–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        )
        context.user_data['user_id'] = user.id
        context.user_data['username'] = user.username or "–ù–µ—Ç username"
        context.user_data['full_name'] = f"{user.first_name} {user.last_name or ''}"
        return QUESTION_1
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def question_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_1"] = update.message.text
    await send_question(update, context, "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É –≤–∞—Å –µ—Å—Ç—å?", QUESTION_2)
    return QUESTION_2

async def question_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_2"] = update.message.text
    await send_question(update, context, "–í–æ–ø—Ä–æ—Å 3: –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å?", QUESTION_3)
    return QUESTION_3

async def question_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_3"] = update.message.text
    await send_question(update, context, "–í–æ–ø—Ä–æ—Å 4: –ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", QUESTION_4)
    return QUESTION_4

async def question_4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_4"] = update.message.text
    await send_question(update, context, "–í–æ–ø—Ä–æ—Å 5: –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É?", QUESTION_5)
    return QUESTION_5

async def question_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["question_5"] = update.message.text

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    message = (
        f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"üÜî ID: {context.user_data['user_id']}\n"
        f"üë§ –ò–º—è: {context.user_data['full_name']}\n"
        f"üì± Username: @{context.user_data['username']}\n"
        f"üìù –û—Ç–≤–µ—Ç—ã:\n"
        f"1. {context.user_data.get('question_1', '-')}\n"
        f"2. {context.user_data.get('question_2', '-')}\n"
        f"3. {context.user_data.get('question_3', '-')}\n"
        f"4. {context.user_data.get('question_4', '-')}\n"
        f"5. {context.user_data.get('question_5', '-')}\n"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=message)
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    context.user_data.clear()
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –∞–Ω–∫–µ—Ç—ã
    conv_handler = ConversationHandler(
        entry_points=[ChatJoinRequestHandler(handle_join_request)],
        states={
            QUESTION_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_1)],
            QUESTION_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_2)],
            QUESTION_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_3)],
            QUESTION_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_4)],
            QUESTION_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_5)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(conv_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        secret_token=os.environ.get('SECRET_TOKEN', 'DEFAULT')
    )
